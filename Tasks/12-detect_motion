import cv2
import numpy as np

vid = cv2.VideoCapture("vid/cars3.mp4")
# vid = cv2.VideoCapture(0)
if not vid.isOpened():
    print("Cannot Open VIDEO")
    exit()

ret, prev_frame = vid.read()
prev_frame_gray = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)
if not ret:
    print("Failed")
    vid.release()
    exit()

# Optionally, resize frames for faster processing
scale = 0.5
prev_frame_gray = cv2.resize(prev_frame_gray, (0, 0), fx=scale, fy=scale)

while True:
    ret, curr_frame = vid.read()
    if not ret:
        vid.set(cv2.CAP_PROP_POS_FRAMES, 0)
        print("Looping video")
        continue

    # Resize the current frame
    curr_frame = cv2.resize(curr_frame, (0, 0), fx=scale, fy=scale)
    curr_frame_gray = cv2.cvtColor(curr_frame, cv2.COLOR_BGR2GRAY)

    frame_diff = cv2.subtract(curr_frame_gray, prev_frame_gray)
    frame_diff = cv2.medianBlur(frame_diff, 1)

    kernel = np.array((3,3), dtype=np.uint8)
    mask = cv2.adaptiveThreshold(frame_diff, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\
            cv2.THRESH_BINARY_INV, 7, 7)
    
    mask = cv2.medianBlur(mask, 1)
    
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel, iterations=1)

    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_TC89_L1)

    detection = []
    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        area = w * h
        if area > 30:
            detection.append([x, y, x+w, y+h])
    for detect in detection:
        cv2.rectangle(curr_frame, (detect[0], detect[1]), (detect[2], detect[3]), (0, 255, 0), 2)

    cv2.imshow("Difference", mask)
    cv2.imshow("Motion", curr_frame)

    prev_frame_gray = curr_frame_gray.copy()

    # Adjust waitKey delay to match target frame rate (e.g., 30 FPS ~33 ms)
    if cv2.waitKey(33) & 0xFF == 27:
        break

vid.release()
cv2.destroyAllWindows()
